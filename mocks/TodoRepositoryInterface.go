// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	entities "github.com/gokhankocer/TODO-API/entities"
	mock "github.com/stretchr/testify/mock"
)

// TodoRepositoryInterface is an autogenerated mock type for the TodoRepositoryInterface type
type TodoRepositoryInterface struct {
	mock.Mock
}

// AddTodo provides a mock function with given fields: t
func (_m *TodoRepositoryInterface) AddTodo(t *entities.Todo) (*entities.Todo, error) {
	ret := _m.Called(t)

	var r0 *entities.Todo
	if rf, ok := ret.Get(0).(func(*entities.Todo) *entities.Todo); ok {
		r0 = rf(t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entities.Todo) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTodo provides a mock function with given fields: t
func (_m *TodoRepositoryInterface) DeleteTodo(t *entities.Todo) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Todo) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTodo provides a mock function with given fields: id
func (_m *TodoRepositoryInterface) GetTodo(id uint) (*entities.Todo, error) {
	ret := _m.Called(id)

	var r0 *entities.Todo
	if rf, ok := ret.Get(0).(func(uint) *entities.Todo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodos provides a mock function with given fields: t
func (_m *TodoRepositoryInterface) GetTodos(t []*entities.Todo) ([]*entities.Todo, error) {
	ret := _m.Called(t)

	var r0 []*entities.Todo
	if rf, ok := ret.Get(0).(func([]*entities.Todo) []*entities.Todo); ok {
		r0 = rf(t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*entities.Todo) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTodo provides a mock function with given fields: todo
func (_m *TodoRepositoryInterface) UpdateTodo(todo *entities.Todo) error {
	ret := _m.Called(todo)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Todo) error); ok {
		r0 = rf(todo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTodoRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewTodoRepositoryInterface creates a new instance of TodoRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTodoRepositoryInterface(t mockConstructorTestingTNewTodoRepositoryInterface) *TodoRepositoryInterface {
	mock := &TodoRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
