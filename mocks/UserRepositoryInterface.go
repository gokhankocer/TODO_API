// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	entities "github.com/gokhankocer/TODO-API/entities"
	mock "github.com/stretchr/testify/mock"
)

// UserRepositoryInterface is an autogenerated mock type for the UserRepositoryInterface type
type UserRepositoryInterface struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *UserRepositoryInterface) CreateUser(user entities.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: id
func (_m *UserRepositoryInterface) DeleteUser(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindUserByEmail provides a mock function with given fields: email
func (_m *UserRepositoryInterface) FindUserByEmail(email string) (entities.User, error) {
	ret := _m.Called(email)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(string) entities.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserById provides a mock function with given fields: id
func (_m *UserRepositoryInterface) FindUserById(id uint) (entities.User, error) {
	ret := _m.Called(id)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(uint) entities.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByName provides a mock function with given fields: name
func (_m *UserRepositoryInterface) FindUserByName(name string) (entities.User, error) {
	ret := _m.Called(name)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(string) entities.User); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByResetPasswordToken provides a mock function with given fields: resetPasswordToken
func (_m *UserRepositoryInterface) FindUserByResetPasswordToken(resetPasswordToken string) (entities.User, error) {
	ret := _m.Called(resetPasswordToken)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(string) entities.User); ok {
		r0 = rf(resetPasswordToken)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(resetPasswordToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: id
func (_m *UserRepositoryInterface) GetUserByID(id uint) (entities.User, error) {
	ret := _m.Called(id)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(uint) entities.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields:
func (_m *UserRepositoryInterface) GetUsers() ([]entities.User, error) {
	ret := _m.Called()

	var r0 []entities.User
	if rf, ok := ret.Get(0).(func() []entities.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: id, user
func (_m *UserRepositoryInterface) UpdateUser(id uint, user entities.User) error {
	ret := _m.Called(id, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, entities.User) error); ok {
		r0 = rf(id, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepositoryInterface creates a new instance of UserRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepositoryInterface(t mockConstructorTestingTNewUserRepositoryInterface) *UserRepositoryInterface {
	mock := &UserRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
